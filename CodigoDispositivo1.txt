//Incluir bibliotecas

#include <DHTesp.h>
#include <EspMQTTClient.h>


//Definicoes e constantes
char SSIDName[] = "Wokwi-GUEST"; //nome da rede WiFi
char SSIDPass[] = ""; //senha da rede WiFI

const int DHT_PIN = 15; //terminal do sensor de temperatura e umidade
const int Photo_PIN = 32; //terminal do sensor photosensivel
const int Relay_PIN = 22; //terminal relay

volatile byte relayState = LOW;

//Fatores de ajuste para o valor lux
float lux = 0.1;
float resolution = 3.3 / 4096;
float GAMMA = 0.7;
float RL10 = 50*1e3;
float RL50 = 16.2*1e3;
float RL100 = 9.98*1e3;

char BrokerURL[] = "broker.hivemq.com"; //URL do broker MQTT
char BrokerUserName[] = ""; //nome do usuario para autenticar no broker MQTT
char BrokerPassword[] = ""; //senha para autenticar no broker MQTT
char MQTTClientName[] = "mqtt-mack-pub"; //nome do cliente MQTT
int BrokerPort = 1883; //porta do broker MQTT

String TopicoPrefixo = "10401167"; //prefixo do topico
String Topico_01 = TopicoPrefixo+"/temperatura"; //nome do topico 01
String Topico_02 = TopicoPrefixo+"/umidade"; //nome do topico 02
String Topico_03 = TopicoPrefixo+"/lux"; //nome do topico 03

//Variaveis globais e objetos
DHTesp dhtSensor; //instancia o objeto dhtSensor a partir da classa DHTesp

EspMQTTClient clienteMQTT(SSIDName, SSIDPass, BrokerURL, BrokerUserName, BrokerPassword, MQTTClientName, BrokerPort); //inicializa o cliente MQTT

//Este prototipo de funcao deve estar sempre presente
void onConnectionEstablished() {
}

void enviarDados() {
  TempAndHumidity temp_umid = dhtSensor.getTempAndHumidity(); //instancia o objeto temp_umid a partir da classe TempAndHumidity
  clienteMQTT.publish(Topico_01, String(temp_umid.temperature, 2) + " Â°C"); 
  clienteMQTT.publish(Topico_02, String(temp_umid.humidity, 1) + " %");
  clienteMQTT.publish(Topico_03, String(lux) + " lux");
  

  int valorPhoto = analogRead(Photo_PIN);
  float voltage = resolution * valorPhoto; 
  float ldr_resistance=10*1e3*voltage/(3.3-voltage);  
  lux = pow(RL10 * pow(10, GAMMA) / ldr_resistance, (1 / GAMMA));

  Serial.print("Valor do sensor de luminosidade (lux): ");
  Serial.println(lux);
}


void rChangeHIGH() {
    if(relayState != HIGH){
        digitalWrite(Relay_PIN, HIGH);
        relayState = HIGH;
        Serial.println("RELAY ON");
        Serial.println("Bomba de agua ligada");
    }
}

void rChangeLOW() {
    if(relayState != LOW){
        digitalWrite(Relay_PIN, LOW);
        relayState = LOW;
        Serial.println("RELAY OFF");
        Serial.println("Bomba de agua desligada");
    }
}

//Setup
void setup() {
  Serial.begin(9600);
  
  dhtSensor.setup(DHT_PIN, DHTesp::DHT22); //inicializa o sensor de temperatura e umidade

  clienteMQTT.enableDebuggingMessages(); //habilita mensagens de debug no monitor serial

  pinMode(Relay_PIN, OUTPUT);
  digitalWrite(Relay_PIN, LOW);

}

//Loop
void loop() {

  clienteMQTT.loop(); //funcao necessaria para manter a conexao com o broker MQTT ativa e coletar as mensagens recebidas
  enviarDados(); //funcao para publicar os dados no broker MQTT

  if (clienteMQTT.isWifiConnected() == 1) {
    Serial.println("Conectado ao WiFi!");
  } else {
    Serial.println("Nao conectado ao WiFi!");
  }

  if (clienteMQTT.isMqttConnected() == 1) {
    Serial.println("Conectado ao broker MQTT!");
  } else {
    Serial.println("Nao conectado ao broker MQTT!");
  }

  Serial.println("Nome do cliente: " + String(clienteMQTT.getMqttClientName())
    + " / Broker MQTT: " + String(clienteMQTT.getMqttServerIp())
    + " / Porta: " + String(clienteMQTT.getMqttServerPort())
  );

  TempAndHumidity temperature_umid = dhtSensor.getTempAndHumidity();
  if(temperature_umid.temperature < 30 && temperature_umid.humidity < 60 && (lux >= 400 && lux <= 800) && relayState == LOW){
        rChangeHIGH();
	      delay(5000);
        rChangeLOW();
  }
    

  delay(5000);
}